WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.390
You're about to start your first programming exercise for this lesson.

00:00:03.390 --> 00:00:04.870
But before you do, I want to walk through

00:00:04.870 --> 00:00:06.685
this notebook and just make some points about it.

00:00:06.684 --> 00:00:08.289
There are some differences between what we're

00:00:08.289 --> 00:00:10.689
doing here and what we've been doing previously.

00:00:10.689 --> 00:00:14.809
The first thing I want to point out is just how long this notebook actually is.

00:00:14.810 --> 00:00:19.109
All of these exercises are actually going to take place in the same notebook,

00:00:19.109 --> 00:00:20.609
every single exercise for this lesson.

00:00:20.609 --> 00:00:24.429
And what that means for you is that any changes you make to this notebook in,

00:00:24.429 --> 00:00:26.219
for example, the next exercise,

00:00:26.219 --> 00:00:29.669
they'll show up in all future exercises as well.

00:00:29.670 --> 00:00:31.730
So, what this means for you is that you should really

00:00:31.730 --> 00:00:34.145
try to keep your code tidy if you can.

00:00:34.145 --> 00:00:37.565
If you ever want to reset the notebook to where it began,

00:00:37.564 --> 00:00:39.234
you can hit menu,

00:00:39.234 --> 00:00:42.000
reset data, and go through this whole flow.

00:00:42.000 --> 00:00:44.024
But keep in mind, if you do that,

00:00:44.024 --> 00:00:45.119
you'll lose all your work,

00:00:45.119 --> 00:00:46.839
all the changes you made up to that point.

00:00:46.840 --> 00:00:49.210
So, just be careful. The second thing I

00:00:49.210 --> 00:00:51.929
want to point out is some strange Jupyter notebook syntax.

00:00:51.929 --> 00:00:53.969
So down here, you can see,

00:00:53.969 --> 00:00:56.064
we defined a DroneIn3D class,

00:00:56.064 --> 00:00:58.649
but we don't define the entire class in the cell.

00:00:58.649 --> 00:01:01.589
In fact, in the cell, all we defined is the initializer.

00:01:01.590 --> 00:01:04.734
Then we have some text and then down here,

00:01:04.734 --> 00:01:07.689
we continue working on that same class.

00:01:07.689 --> 00:01:11.609
We're adding to this DroneIn3D class and that's all that this syntax means.

00:01:11.609 --> 00:01:13.260
So, don't be surprised when you see it.

00:01:13.260 --> 00:01:16.035
The reason we're doing it this way is because it let's us

00:01:16.034 --> 00:01:19.094
incrementally build up the class cell by cell.

00:01:19.094 --> 00:01:23.269
Third thing I want to point out is how solutions are used in this notebook.

00:01:23.269 --> 00:01:27.554
If you look here at this cell with all the imports, you see this line.

00:01:27.555 --> 00:01:32.070
And in fact, UDACITYDroneIn3D and UDACITYController are actually

00:01:32.069 --> 00:01:33.929
fully implemented versions of

00:01:33.930 --> 00:01:37.305
the two classes that you will be implementing throughout this lesson.

00:01:37.305 --> 00:01:40.340
And if you click up here on the Jupyter logo,

00:01:40.590 --> 00:01:45.145
you could actually inspect that solution code by opening solution.py,

00:01:45.144 --> 00:01:49.280
but you should try your best to solve these on your own before you do that.

00:01:49.939 --> 00:01:53.719
So, let's go back down to this first class definition.

00:01:53.719 --> 00:01:59.510
Here, you can see this DroneIn3D class actually inherits from the solution class.

00:01:59.510 --> 00:02:01.390
And the reason we're doing it this way will be a

00:02:01.390 --> 00:02:04.299
little more clear if we actually look at the first exercise.

00:02:04.299 --> 00:02:07.009
So here, you can see exercise 1.1,

00:02:07.010 --> 00:02:11.330
and this exercise actually already has a working implementation.

00:02:11.330 --> 00:02:15.020
So, if I execute this cell and then run the testing cell,

00:02:15.020 --> 00:02:17.460
you see test pass for exercise 1.1.

00:02:17.460 --> 00:02:21.010
Now, the reason that worked is because what

00:02:21.009 --> 00:02:25.269
this function is currently doing is just deferring to the super class implementation,

00:02:25.270 --> 00:02:28.475
the solution class implementation of the same function.

00:02:28.474 --> 00:02:30.329
What's nice about that is if you went through,

00:02:30.330 --> 00:02:33.270
you could run this whole notebook and everything would actually work and

00:02:33.270 --> 00:02:36.695
you would get a good sense for what it is you're going to be doing in this lesson.

00:02:36.694 --> 00:02:39.310
But the only reason this code is passing is

00:02:39.310 --> 00:02:41.909
because it's calling this super class implementation.

00:02:41.909 --> 00:02:45.859
What you'll actually want to do when you get to these exercises is first,

00:02:45.860 --> 00:02:51.290
maybe comment out the super class implementation and then start writing your code here.

00:02:51.289 --> 00:02:57.049
You can see that if I comment out the super class and then rerun the cell,

00:02:57.050 --> 00:02:59.660
the test isn't going to pass anymore.

00:02:59.659 --> 00:03:02.039
All right, you're about ready to start exercise one.

00:03:02.039 --> 00:03:03.620
In this exercise, you're going to

00:03:03.620 --> 00:03:07.335
first define this set_propeller_angular_velocities function.

00:03:07.335 --> 00:03:10.830
Then you'll write code to just calculate the rotation matrix.

00:03:10.830 --> 00:03:13.990
Then you'll use that rotation matrix to calculate

00:03:13.990 --> 00:03:17.395
the linear acceleration of the drone regardless of what state it's in.

00:03:17.395 --> 00:03:18.939
So now, you should go through,

00:03:18.939 --> 00:03:20.719
complete those three exercises,

00:03:20.719 --> 00:03:22.905
and once you get test pass here,

00:03:22.905 --> 00:03:25.844
you can see it says, Exercise 1 ends here.

00:03:25.844 --> 00:03:27.675
At that point, you should press "Next",

00:03:27.675 --> 00:03:30.120
and continue with the lesson. Good luck.

