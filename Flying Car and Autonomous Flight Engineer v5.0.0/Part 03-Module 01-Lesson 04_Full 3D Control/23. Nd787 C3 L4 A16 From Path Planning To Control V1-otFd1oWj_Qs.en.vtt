WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.819
Before you jump into the final project it's important

00:00:03.819 --> 00:00:07.514
to connect what you did in path planning to what you'll be doing now.

00:00:07.514 --> 00:00:09.029
In the previous project,

00:00:09.029 --> 00:00:11.664
you implemented a 3D Motion Planner.

00:00:11.664 --> 00:00:17.494
The output of that planner was a sequence of x, y, z waypoints.

00:00:17.495 --> 00:00:19.505
Now, you are about to implement

00:00:19.504 --> 00:00:23.029
a full controller and this controller really needs to target x,

00:00:23.030 --> 00:00:27.039
y, z and yaw coordinates as a function of time.

00:00:27.039 --> 00:00:32.379
Additionally, this controller will ideally need the first derivatives of the x,

00:00:32.380 --> 00:00:34.725
y, and z coordinates as well.

00:00:34.725 --> 00:00:38.835
So there are three main gaps between what you produce as

00:00:38.835 --> 00:00:43.475
output and what the controller you'll write needs as input.

00:00:43.475 --> 00:00:46.370
The first gap is the yaw information.

00:00:46.369 --> 00:00:48.159
In order to control yaw,

00:00:48.159 --> 00:00:52.344
your controller needs a target yaw value for any time in flight.

00:00:52.344 --> 00:00:58.519
This is something that we will be providing on top of the x and y and z targets.

00:00:58.520 --> 00:01:02.170
But you can think of yaw as a completely separate variable which

00:01:02.170 --> 00:01:05.739
you may want to use to orient a camera on the drone for example.

00:01:05.739 --> 00:01:08.554
The second gap is in the velocities.

00:01:08.555 --> 00:01:12.450
Your controller needs to be passed target velocities and that's not

00:01:12.450 --> 00:01:16.775
something that you thought about when doing path planning in the previous course.

00:01:16.775 --> 00:01:22.820
You will be assuming constant velocity motion with some speed that we decide in advance.

00:01:22.819 --> 00:01:25.859
The third gap is the time information.

00:01:25.859 --> 00:01:29.750
You'll assume the vehicle travels in a straight line between

00:01:29.750 --> 00:01:36.159
adjacent waypoints and use distance and velocity to assign target time to each waypoint.

00:01:36.159 --> 00:01:39.239
You'll use some linear interpolation between

00:01:39.239 --> 00:01:43.379
waypoints to find the target position at any arbitrary time.

00:01:43.379 --> 00:01:48.939
Now, I want to point out that this is a very rudimentary technique for smoothing the waypoints.

00:01:48.939 --> 00:01:54.534
And it results in trajectories with instantaneous changes in velocity at the case.

00:01:54.534 --> 00:01:59.034
And these trajectories are actually impossible for the vehicle to fly.

00:01:59.034 --> 00:02:02.209
Now, that's fine so long as you accept that

00:02:02.209 --> 00:02:07.254
your vehicle's actual trajectory you will have to deviate slightly from the target.

00:02:07.254 --> 00:02:09.889
And you give your vehicle enough of a buffer,

00:02:09.889 --> 00:02:12.928
so that it doesn't collide with any obstacles.

00:02:12.929 --> 00:02:14.870
In a more robust design,

00:02:14.870 --> 00:02:18.650
you would want to take a different approach to this waypoints moving step.

