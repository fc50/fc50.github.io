WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.194
Let's look at an example of receding horizon planning.

00:00:03.194 --> 00:00:07.529
The basic idea is that you construct an initial plan like this,

00:00:07.530 --> 00:00:11.505
using some approximate model around the course features in the environment.

00:00:11.505 --> 00:00:14.339
In this case, an approximate model might be to take

00:00:14.339 --> 00:00:17.309
your 2D grid model with relatively large grid cells,

00:00:17.309 --> 00:00:18.929
rather than a full 3D model,

00:00:18.929 --> 00:00:21.839
and use that 2D model to construct a rough plan.

00:00:21.839 --> 00:00:26.160
Then, you construct a local plan using a more detailed model considering,

00:00:26.160 --> 00:00:29.565
for example, the full 3D polyhedra of the obstacles.

00:00:29.565 --> 00:00:33.570
But you only compute the local plan out to some relatively nearby horizon.

00:00:33.570 --> 00:00:36.240
The goal is not going to be inside that distance.

00:00:36.240 --> 00:00:37.304
So, for the local model,

00:00:37.304 --> 00:00:39.960
you can set the goal as the nearest state on the global plan,

00:00:39.960 --> 00:00:42.704
outside the horizon, given by the global planner.

00:00:42.704 --> 00:00:44.879
The local planner will plant inside

00:00:44.880 --> 00:00:47.490
that horizon to the nearest state in the global planner.

00:00:47.490 --> 00:00:50.640
The vehicle starts executing the local plan but the key

00:00:50.640 --> 00:00:54.539
is that as the vehicle moves the states inside the horizon change.

00:00:54.539 --> 00:00:55.949
As you see here,

00:00:55.950 --> 00:00:58.800
the horizon is changing as the vehicle moves and

00:00:58.799 --> 00:01:02.027
the vehicle keeps re-planning out to the new horizon.

00:01:02.027 --> 00:01:04.200
An even better idea to modify this is,

00:01:04.200 --> 00:01:07.650
instead of having the local plan be the next state in the global plan,

00:01:07.650 --> 00:01:10.425
you could start instead by using breadth-first search

00:01:10.424 --> 00:01:13.905
backward from the goal to every state in the 2D global model.

00:01:13.905 --> 00:01:16.814
By running breadth-first search backwards from the goal,

00:01:16.814 --> 00:01:20.745
you're computing the cost of the shortest path from each state to the goal.

00:01:20.745 --> 00:01:25.590
In this way, you can label each state in the global model with the cost of the goal.

00:01:25.590 --> 00:01:28.560
And now, the local planner can then try and find

00:01:28.560 --> 00:01:30.210
the minimum cost path inside

00:01:30.209 --> 00:01:33.629
the local model to the minimum cost state in the global plan.

00:01:33.629 --> 00:01:35.399
What's nice is that you can keep

00:01:35.400 --> 00:01:38.594
this global cost field fixed and then, as the vehicle moves,

00:01:38.594 --> 00:01:43.780
it can keep picking new global states to fly to as the horizon moves outward.

00:01:43.780 --> 00:01:46.465
Now, a couple of questions might be on your mind.

00:01:46.465 --> 00:01:49.790
First, how do you pick the horizon for the local planner?

00:01:49.790 --> 00:01:52.730
This is entirely a function of how fast the vehicle

00:01:52.730 --> 00:01:55.640
is moving and how quickly the planner can re-plan,

00:01:55.640 --> 00:01:58.715
which will be a function of how fast your flight computer is.

00:01:58.715 --> 00:02:02.885
There isn't really a recipe or an algorithm for picking the horizon.

00:02:02.885 --> 00:02:06.350
You just have to know how far out you can plan given

00:02:06.349 --> 00:02:10.584
the constraints of how fast you're flying and your computational constraints.

00:02:10.584 --> 00:02:11.795
In the next exercise,

00:02:11.794 --> 00:02:16.204
you'll get a chance to implement a receding horizon planner and figure out what

00:02:16.205 --> 00:02:21.080
works well in terms of resolution for both the local and global planner,

00:02:21.080 --> 00:02:22.960
as well as horizon scale.

