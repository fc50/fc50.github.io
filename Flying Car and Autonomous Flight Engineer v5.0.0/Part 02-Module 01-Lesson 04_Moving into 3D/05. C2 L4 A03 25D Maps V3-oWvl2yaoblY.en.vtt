WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.839
Because of the complexity and memory storage requirements of maintaining

00:00:03.839 --> 00:00:08.655
a dense 3D grid of the configuration space with free and occupied cells,

00:00:08.654 --> 00:00:12.059
a common alternative is to use so-called two and a half D maps,

00:00:12.060 --> 00:00:14.580
where we assume that every obstacle extends from

00:00:14.580 --> 00:00:18.030
the ground plane up to some height with nothing above it.

00:00:18.030 --> 00:00:21.870
This means that you can actually store your planning map as a 2D map.

00:00:21.870 --> 00:00:26.199
But instead of each cell being labeled with whether or not that cell is feasible,

00:00:26.199 --> 00:00:29.310
each cell is labeled with the height of the obstacle,

00:00:29.309 --> 00:00:30.599
or in other words,

00:00:30.600 --> 00:00:33.840
the minimum altitude at which that cell becomes feasible.

00:00:33.840 --> 00:00:36.140
This is essentially the representation that

00:00:36.140 --> 00:00:38.630
you'll be working with in the upcoming project,

00:00:38.630 --> 00:00:42.109
which consists of a polygon representation of

00:00:42.109 --> 00:00:44.210
the ground plane footprint of each building in

00:00:44.210 --> 00:00:47.090
the environment and the height of the building.

00:00:47.090 --> 00:00:50.435
For example, the representation of a house

00:00:50.435 --> 00:00:53.855
which has a pitched roof might look something like this,

00:00:53.854 --> 00:00:58.609
where each one of these columns represents the height at which flight becomes feasible.

00:00:58.609 --> 00:01:00.740
In the case where there are no obstacles,

00:01:00.740 --> 00:01:04.040
then the minimum feasible altitude for those cells will be zero.

00:01:04.040 --> 00:01:08.930
And again, we're not representing these columns as actual columns inside a 3D grid.

00:01:08.930 --> 00:01:13.545
We're just representing the XY location of each polygon and the corresponding height.

00:01:13.545 --> 00:01:18.090
Notice that what we've done here is implicitly separate the plan space, x, y,

00:01:18.090 --> 00:01:22.005
z from the representation required to check if moves are feasible,

00:01:22.004 --> 00:01:25.469
the x, y, and minimum flight altitude at each point.

00:01:25.469 --> 00:01:29.039
This type of map works really well for a lot of flight applications.

00:01:29.040 --> 00:01:31.073
In your planning solution in this case,

00:01:31.072 --> 00:01:32.954
the state of the vehicle along the path

00:01:32.954 --> 00:01:35.730
encodes the planned flight altitude of that location,

00:01:35.730 --> 00:01:37.980
and that means that unsurprisingly,

00:01:37.980 --> 00:01:40.770
your flight plans in 3D will often be longer than

00:01:40.769 --> 00:01:44.899
2D plans because you need to take actions to change altitude.

00:01:44.900 --> 00:01:49.359
In 3D, you might have a flight plan that goes up and over then down,

00:01:49.359 --> 00:01:51.004
as the vehicle flies over this house.

00:01:51.004 --> 00:01:55.039
But the storage required in the case of a two and a half D map representation

00:01:55.040 --> 00:01:59.570
to check if a plan move is feasible is no worse than it was before on a 2D grid.

00:01:59.569 --> 00:02:02.269
One drawback of this representation is that you

00:02:02.269 --> 00:02:04.954
do lose the ability to represent complex geometry.

00:02:04.954 --> 00:02:07.609
You can no longer represent the freespace, for example,

00:02:07.609 --> 00:02:10.685
under the tree branches or under bridges.

00:02:10.685 --> 00:02:14.210
For flying cars, that's probably okay because you can usually

00:02:14.210 --> 00:02:18.090
assume that you don't want your flying car flying under a bridge or under a tree.

