WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.890
What are the pros and cons of a particle filter?

00:00:02.890 --> 00:00:08.130
Well, the pros are that we can obviously express many more distributions than before.

00:00:08.130 --> 00:00:11.070
We can also capture more complex distributions of

00:00:11.070 --> 00:00:14.349
our state estimate such as multi-modal distributions.

00:00:14.349 --> 00:00:19.699
Unlike the Kalman filter where our initial estimate is always a Gaussian,

00:00:19.699 --> 00:00:22.359
given by a mean and a co-variance,

00:00:22.359 --> 00:00:27.265
our initial estimate can be given by any initial distribution that we can evaluate,

00:00:27.265 --> 00:00:29.129
in order to sample from it.

00:00:29.129 --> 00:00:33.450
For example, we've already discussed using the uniform distribution to allow us to

00:00:33.450 --> 00:00:38.130
represent the idea that the vehicle is somewhere in the general environment,

00:00:38.130 --> 00:00:39.855
but we're not really sure where.

00:00:39.854 --> 00:00:42.015
This doesn't happen very often,

00:00:42.015 --> 00:00:46.554
but it is a nice thing to know about as an error recovery mechanism if for instance,

00:00:46.554 --> 00:00:49.409
estimation fails in some dramatic way.

00:00:49.409 --> 00:00:54.869
What are the cons? Well, multi-modal distributions can cause problems for

00:00:54.869 --> 00:00:57.449
the control system in that we have to decide

00:00:57.450 --> 00:01:00.730
what state to give the controller as our best estimate.

00:01:00.729 --> 00:01:04.319
Naively taking the mean of a multi-modal distribution

00:01:04.319 --> 00:01:08.704
and using it as a state estimate is obviously the wrong thing to do.

00:01:08.704 --> 00:01:13.284
As an example, imagine you had some bi-modal distribution,

00:01:13.284 --> 00:01:16.979
then the mean is somewhere in the middle and that's actually

00:01:16.980 --> 00:01:21.150
a very unlikely state and the controller could have failures.

00:01:21.150 --> 00:01:25.815
Another problem with particle filters is that they tend to be computationally costly.

00:01:25.814 --> 00:01:30.390
There's no way to know ahead of time how many particles you need which

00:01:30.390 --> 00:01:35.299
is operationally a problem but even worse is that empirically,

00:01:35.299 --> 00:01:39.349
the number of particles needed to get a good state estimate seems

00:01:39.349 --> 00:01:43.744
to grow exponentially with the number of variables in the state vector.

00:01:43.745 --> 00:01:47.689
For a state estimate with 12,16, or 20 variables,

00:01:47.689 --> 00:01:50.420
which is often the case for things like flying cars,

00:01:50.420 --> 00:01:52.909
particle filtering can be prohibitive.

00:01:52.909 --> 00:01:55.340
One way to address this problem is to use

00:01:55.340 --> 00:01:58.515
a particle filter over a subset of the state variables.

00:01:58.515 --> 00:02:01.659
For example, just over the position of the vehicle,

00:02:01.659 --> 00:02:05.509
and then you can incorporate the particle filters position estimate as

00:02:05.510 --> 00:02:11.955
an effective measurement inside a Kalman Filter which runs over the entire state vector.

00:02:11.955 --> 00:02:14.980
That particular approach is what was used for

00:02:14.979 --> 00:02:19.780
state estimation in this airplane flying in a parking garage at MIT.

00:02:19.780 --> 00:02:23.259
The sensor is a laser range finder and we wanted to use

00:02:23.259 --> 00:02:28.479
a particle filter to handle the badly non-linear laser range finder measurements,

00:02:28.479 --> 00:02:33.044
but we didn't want to pay the computational cost of running a full particle filter.

00:02:33.044 --> 00:02:36.639
So, the particle filter ran over the position variables,

00:02:36.639 --> 00:02:40.699
and the Kalman filter incorporated the output as a measurement,

00:02:40.699 --> 00:02:42.185
along with the IMU,

00:02:42.185 --> 00:02:46.530
to get a consistent and accurate state estimate in flight.

