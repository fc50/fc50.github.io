WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.990
Okay. We have this equation which relates the optical flow vector,

00:00:03.990 --> 00:00:07.565
u and v, to the change in the image from t to t plus one.

00:00:07.565 --> 00:00:11.650
But there's a problem here, because this is a single equation with two unknowns.

00:00:11.650 --> 00:00:14.070
We don't know u or v,

00:00:14.070 --> 00:00:16.769
and this isn't just an abstract mathematical problem,

00:00:16.769 --> 00:00:19.570
it's an operational problem called the aperture problem.

00:00:19.570 --> 00:00:23.160
The fact that we have one equation with two unknowns means that there

00:00:23.160 --> 00:00:26.859
could be motion in the image that we can't necessarily explain.

00:00:26.859 --> 00:00:29.725
For example, if I have a pixel on a line,

00:00:29.725 --> 00:00:31.030
and the camera moves,

00:00:31.030 --> 00:00:33.929
I can't disambiguate any motion parallel to

00:00:33.929 --> 00:00:37.759
the image gradient that is parallel to that one.

00:00:37.759 --> 00:00:40.905
How do we solve this ill-posed problem?

00:00:40.905 --> 00:00:45.270
Remember, up until now we've been looking at individual pixels.

00:00:45.270 --> 00:00:47.625
There are a few things we might be tempted to do.

00:00:47.625 --> 00:00:51.994
For example, we might want to make u and v consistent everywhere in the image.

00:00:51.994 --> 00:00:56.429
But that doesn't actually work because the projective geometry of camera imaging

00:00:56.429 --> 00:00:57.945
causes pixel motion to have

00:00:57.945 --> 00:01:02.070
variable velocity depending on where in the frame of pixel is.

00:01:02.070 --> 00:01:07.680
Instead, what we do is try to make the motion of some group of local pixels consistent.

00:01:07.680 --> 00:01:11.290
This is known as a Lucas-Kanade optical flow algorithm.

00:01:11.290 --> 00:01:15.930
Let's assume that the pixel neighbors have the same u,v velocity vector.

00:01:15.930 --> 00:01:18.110
If we use a five-by-five window,

00:01:18.109 --> 00:01:20.429
that gives us 25 equations per pixel,

00:01:20.430 --> 00:01:22.610
and you see the 25 equations here.

00:01:22.609 --> 00:01:24.769
This equation should look very familiar.

00:01:24.769 --> 00:01:28.399
This is essentially a least squares problem that we're trying to solve for u and

00:01:28.400 --> 00:01:32.270
v. This can be solved in closed form by noticing that it's in the form,

00:01:32.269 --> 00:01:35.079
minus b plus a times x equals zero.

00:01:35.079 --> 00:01:37.504
As you learned in the first estimation lesson,

00:01:37.504 --> 00:01:40.979
this can be solved as a least squares estimator where x is given by

00:01:40.980 --> 00:01:45.630
A transpose A to the power minus one times A transpose again times b.

00:01:45.629 --> 00:01:51.719
The x this gives us will be the best estimate for u and v. It's important to notice that

00:01:51.719 --> 00:01:54.629
the particular matrix elements in A transpose A tells us

00:01:54.629 --> 00:01:58.039
a lot about where we will get a good velocity estimates.

00:01:58.040 --> 00:02:03.075
The eigenvalues of A transpose A are essentially the local image gradient.

00:02:03.075 --> 00:02:05.484
When the eigenvalues are small,

00:02:05.484 --> 00:02:08.675
we will not have much image gradient in any direction,

00:02:08.675 --> 00:02:11.070
and the least square solution will be affected

00:02:11.069 --> 00:02:13.769
by small variations of the image intensities.

00:02:13.770 --> 00:02:17.860
If we look at a five-by-five patch here in this particular image,

00:02:17.860 --> 00:02:20.180
the spatial gradient is very low,

00:02:20.180 --> 00:02:22.835
and we will not get much optical flow there.

00:02:22.835 --> 00:02:25.570
When the ratio of eigenvalues are large,

00:02:25.569 --> 00:02:29.764
we'll have a strong image gradient in one direction, but not another.

00:02:29.764 --> 00:02:33.479
Imagine that we have a strong spatial gradient in the x direction,

00:02:33.479 --> 00:02:38.819
but a very low spatial gradient in the y direction which typically happens along an edge.

00:02:38.819 --> 00:02:41.039
The least squares solution will be affected by

00:02:41.039 --> 00:02:44.824
small variations in the image intensity along the edge.

00:02:44.824 --> 00:02:49.789
When the eigenvalues are large and the ratio of the eigenvalues are small,

00:02:49.789 --> 00:02:52.489
we have a strong image gradient in both directions

00:02:52.490 --> 00:02:55.370
which usually happens for highly textured regions,

00:02:55.370 --> 00:02:59.409
and we'll be able to accurately recover the relative motion of these pixels.

00:02:59.409 --> 00:03:02.270
Though Shi-Tomasi features we were looking at

00:03:02.270 --> 00:03:05.390
a few minutes ago are designed exactly for this idea.

00:03:05.389 --> 00:03:09.625
Finding features where the smallest eigenvalue is still large.

00:03:09.625 --> 00:03:13.625
You can also try other features for optical flow such as

00:03:13.625 --> 00:03:16.460
the Harris corner detector which is specifically designed to

00:03:16.460 --> 00:03:20.034
keep the ratio of the eigenvalues small as well.

00:03:20.034 --> 00:03:23.599
But given the ability to extract features from an image,

00:03:23.599 --> 00:03:26.219
you can now solve the least squares problem and

00:03:26.219 --> 00:03:29.344
determine the motion of those features in subsequent images.

00:03:29.344 --> 00:03:31.800
That's exactly what you're going to do using

00:03:31.800 --> 00:03:35.880
a Lucas-Kanade optical flow algorithm in your next exercise.

