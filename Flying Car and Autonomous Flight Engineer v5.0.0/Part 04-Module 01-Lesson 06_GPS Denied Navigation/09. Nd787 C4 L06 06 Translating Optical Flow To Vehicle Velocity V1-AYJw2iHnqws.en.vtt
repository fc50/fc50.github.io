WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Now, you've completed the exercise that allows you to

00:00:03.000 --> 00:00:06.080
get a velocity estimate in the image plane for the (u,

00:00:06.080 --> 00:00:10.254
v) velocity vector, but you have two new problems now.

00:00:10.255 --> 00:00:13.860
The first problem is that you'll have a lot of (u, v) vectors,

00:00:13.859 --> 00:00:15.719
one for each of the features that you asked

00:00:15.720 --> 00:00:18.820
the Lucas-Kanade algorithm to give you the velocity for.

00:00:18.820 --> 00:00:20.765
Well, that's easy to deal with.

00:00:20.765 --> 00:00:24.054
You could take the most likely vector or the mean velocity vector.

00:00:24.054 --> 00:00:27.339
Remember, those aren't the same but either will do.

00:00:27.339 --> 00:00:31.149
The second problem is that the velocities are in the image plane.

00:00:31.149 --> 00:00:34.269
They're measured in something like pixels per frame,

00:00:34.270 --> 00:00:37.570
and if you want to incorporate that into your estimate for your vehicle,

00:00:37.570 --> 00:00:40.090
you need a way to actually put the velocity vector in

00:00:40.090 --> 00:00:43.605
the image plane into the body coordinates of the vehicle.

00:00:43.604 --> 00:00:46.419
Basically, the optical flow vectors tell us

00:00:46.420 --> 00:00:48.940
something about the apparent motion of the scene,

00:00:48.939 --> 00:00:52.724
but we really want to recover the velocity vector of the camera itself.

00:00:52.725 --> 00:00:55.609
This is basically going to be a geometry problem.

00:00:55.609 --> 00:00:58.659
The full derivation of recovering the geometry from a set

00:00:58.659 --> 00:01:01.599
of optical flow vectors is somewhat involved,

00:01:01.600 --> 00:01:05.760
but let's take a look at the intuition for a vehicle with a downward facing camera.

00:01:05.760 --> 00:01:09.079
We have a camera looking at a pixel on the ground plane.

00:01:09.079 --> 00:01:14.194
The pixel intensity is generated by the appearance of some point in the ECEF frame,

00:01:14.194 --> 00:01:16.259
given by P superscript e,

00:01:16.260 --> 00:01:17.495
which is a three vector,

00:01:17.495 --> 00:01:22.469
Px Py Pz, and we're going to assume that this point is on the ground plane.

00:01:22.469 --> 00:01:27.500
The same location in the body frame is given by P superscript b and projective geometry

00:01:27.500 --> 00:01:32.724
puts the pixel into the image frame P superscript i by dividing by the Z-coordinate.

00:01:32.724 --> 00:01:35.689
We assume that we have a rotation matrix R between

00:01:35.689 --> 00:01:38.884
the world and the body frame and a translation matrix,

00:01:38.885 --> 00:01:40.910
or really a translation vector,

00:01:40.909 --> 00:01:44.909
and we assume that we know the rotation matrix from the IMU gyros,

00:01:44.909 --> 00:01:47.390
and while we don't know the translation vector from

00:01:47.390 --> 00:01:50.450
the earth ECEF frame to the body frame,

00:01:50.450 --> 00:01:52.939
we assume we know the height above the ground plane from

00:01:52.939 --> 00:01:55.355
some depth sensor such as a sonar,

00:01:55.355 --> 00:01:57.665
point LIDAR or a barometer.

00:01:57.665 --> 00:02:03.240
What we want is the body frame velocity V superscript b in the XY plane.

00:02:03.239 --> 00:02:06.979
And, we're going to assume that V superscript b is

00:02:06.980 --> 00:02:11.390
a function of the rotation matrix and the derivative of the translation vector.

00:02:11.389 --> 00:02:14.044
The relative motion of each pixel can be explained

00:02:14.044 --> 00:02:16.844
basically as a combination of two terms.

00:02:16.844 --> 00:02:20.305
The first term contains V superscript b explicitly.

00:02:20.305 --> 00:02:22.550
This is basically how much the pixel is moving

00:02:22.550 --> 00:02:25.430
in the image frame based on camera translation.

00:02:25.430 --> 00:02:32.040
The second term explains the pixel motion as a function of the camera rotation.

00:02:32.379 --> 00:02:36.740
Before we can solve the equation for V superscript b,

00:02:36.740 --> 00:02:38.540
we have to deal with the fact that the first term

00:02:38.539 --> 00:02:40.939
depends on the actual height of the camera,

00:02:40.939 --> 00:02:46.099
that is, the distance from the point P superscript e to the camera plane.

00:02:46.099 --> 00:02:47.574
But given that measurement,

00:02:47.574 --> 00:02:50.464
we can solve for PZ according to this equation,

00:02:50.465 --> 00:02:53.085
where d is the measured depth from our sensor,

00:02:53.085 --> 00:02:56.099
theta is the role and phi is the pitch.

00:02:56.099 --> 00:03:01.169
It's fundamentally this relationship between the height and the apparent motion of

00:03:01.169 --> 00:03:03.719
the pixels in the frame that allows us to

00:03:03.719 --> 00:03:07.300
translate the optical flow vectors into the body frame.

00:03:07.300 --> 00:03:09.540
Now that we have all the necessary terms,

00:03:09.539 --> 00:03:14.359
we can solve for V superscript b in this equation as a least squares problem.

