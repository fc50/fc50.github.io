WEBVTT
Kind: captions
Language: en

00:00:00.390 --> 00:00:05.458
So let me show you one way you can interact with this drone with code.

00:00:05.458 --> 00:00:07.319
So, I've already connected to this drone.

00:00:07.320 --> 00:00:12.169
And, now, what I want to do is call this take_control method, drone.take_control.

00:00:12.169 --> 00:00:13.320
And I'm about to do this,

00:00:13.320 --> 00:00:17.300
so as I do pay attention to this little button here that says manual.

00:00:17.300 --> 00:00:22.240
As you can see, taking control changes the command mode to guided.

00:00:22.239 --> 00:00:23.853
Next, I can call drone.arm,

00:00:23.855 --> 00:00:26.504
and before I do, pay attention to these rotors.

00:00:26.504 --> 00:00:30.539
Because I called a drone.arm causes them to start spinning.

00:00:30.539 --> 00:00:32.795
And, now, we're almost ready to do the really fun stuff,

00:00:32.795 --> 00:00:35.090
which involves actually flying the drone.

00:00:35.090 --> 00:00:38.870
So, let's take off to an altitude of five meters.

00:00:38.868 --> 00:00:41.463
Sure enough, the drone flies up as expected.

00:00:41.465 --> 00:00:43.850
I can use this command position method to

00:00:43.850 --> 00:00:48.314
actually set a target position and the drone should fly there.

00:00:48.314 --> 00:00:56.658
And now, let me fly back to where I started.

00:00:56.658 --> 00:00:59.444
All right. This is starting to make commanding the drone look pretty easy.

00:00:59.445 --> 00:01:01.615
And in fact, it is pretty easy.

00:01:01.615 --> 00:01:06.954
Now remember, the final project for this lesson involves making a drone fly in a square.

00:01:06.953 --> 00:01:09.898
Well, given this command position interface,

00:01:09.900 --> 00:01:11.850
it seems like it should be pretty easy to do that.

00:01:11.849 --> 00:01:14.933
And in fact, I've done it down here.

00:01:14.935 --> 00:01:17.045
Here we define the coordinates of a square,

00:01:17.045 --> 00:01:19.905
or the coordinates of the corners of a square, I should say.

00:01:19.905 --> 00:01:22.920
And if we just loop through those corners then we can just

00:01:22.920 --> 00:01:26.180
do a drone.cmd_position star corner.

00:01:26.180 --> 00:01:30.510
Let's just run this to see if it works as expected.

00:01:30.510 --> 00:01:32.315
Sure enough, it flies right.

00:01:32.313 --> 00:01:34.738
Then it flies back. Now we're at 10, 10.

00:01:34.739 --> 00:01:37.183
Then it flies left to 0, 10.

00:01:37.185 --> 00:01:40.790
And back forwards to where it began at 0, 0.

00:01:40.790 --> 00:01:43.160
So, great. Problem solved.

00:01:43.159 --> 00:01:45.114
Final project over, onto the next lesson.

00:01:45.114 --> 00:01:47.250
Right? Not quite.

00:01:47.250 --> 00:01:50.599
Because there's actually a problem with structuring our drone code this way.

00:01:50.599 --> 00:01:53.489
And to highlight what that problem really is,

00:01:53.489 --> 00:01:56.058
I'm going to run this cell again and as I do,

00:01:56.060 --> 00:01:57.990
I want you to now focus over here,

00:01:57.989 --> 00:01:59.394
on the actual simulator,

00:01:59.394 --> 00:02:02.289
but over here, on the code that's executing.

00:02:02.290 --> 00:02:06.995
So let me run this cell. And here you see this asterisk up here,

00:02:06.995 --> 00:02:09.390
and this asterisk is Jupyter Notebook's way of

00:02:09.389 --> 00:02:13.069
saying this cell is currently executing code.

00:02:13.068 --> 00:02:17.188
Now, the reason why I'm calling your attention to the fact that this cell is executing

00:02:17.188 --> 00:02:22.843
code is because that means this code is all blocking code.

00:02:22.843 --> 00:02:28.079
This drone is going to go in a square trajectory before it does anything else,

00:02:28.080 --> 00:02:31.200
which is fine in a nice simulated environment.

00:02:31.199 --> 00:02:34.574
But what about in the unpredictable, unknowable real world?

00:02:34.574 --> 00:02:37.905
What if, when I execute this cell, shortly after,

00:02:37.905 --> 00:02:42.150
another drone flew in the way of ours or something else happened?

00:02:42.150 --> 00:02:46.563
The fact is, there's all sorts of unpredictable obstacles that could occur.

00:02:46.563 --> 00:02:48.853
And when these things happen,

00:02:48.854 --> 00:02:51.539
our drone needs to be able to respond dynamically,

00:02:51.538 --> 00:02:56.128
and using this linear sequential style of programming just isn't going to cut it.

00:02:56.128 --> 00:02:59.518
We're going to need a different way of thinking about our logic,

00:02:59.520 --> 00:03:03.550
and that different way is called event driven program.

