WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.044
When you look at the Kalman filter pseudo code,

00:00:03.044 --> 00:00:05.415
the predict function looks like this.

00:00:05.415 --> 00:00:09.240
Now, instead of taking some arbitrary belief,

00:00:09.240 --> 00:00:12.660
it just takes the mean and covariance from

00:00:12.660 --> 00:00:16.504
t minus one along with the current control input.

00:00:16.504 --> 00:00:19.529
And because everything is Gaussian,

00:00:19.530 --> 00:00:24.750
the integral from the base filter takes a nice closed form and I can compute

00:00:24.750 --> 00:00:27.899
the new Gaussian by taking the old mean and

00:00:27.899 --> 00:00:31.664
passing it through the state transition function we just defined.

00:00:31.664 --> 00:00:34.004
And that gives us a new mean,

00:00:34.005 --> 00:00:37.020
and to update the covariance,

00:00:37.020 --> 00:00:43.480
I first have to use this g prime function to get this matrix G sub t. And then I

00:00:43.479 --> 00:00:46.140
use this G sub t to transform

00:00:46.140 --> 00:00:50.820
the old covariance and then here add what's called the Process noise.

00:00:50.820 --> 00:00:58.049
So this Q term is why the new covariance is always going to be bigger after prediction.

00:00:58.049 --> 00:01:01.753
Now that I've propagated my mean and covariance,

00:01:01.753 --> 00:01:04.799
I can return those from prediction.

00:01:04.799 --> 00:01:07.125
Before you try to implement this,

00:01:07.125 --> 00:01:11.295
there's one more thing I want to say about this g prime function.

00:01:11.295 --> 00:01:14.075
I choose to write the pseudo code this way,

00:01:14.075 --> 00:01:16.530
because it makes the pseudo code for

00:01:16.530 --> 00:01:21.450
the Kalman filter identical to the extended Kalman filter.

00:01:21.450 --> 00:01:26.189
But really this is a bit of overkill when we're just doing Kalman filters.

00:01:26.189 --> 00:01:28.679
When we talk about the EKF,

00:01:28.679 --> 00:01:31.620
you'll see this g prime is actually what's called

00:01:31.620 --> 00:01:34.620
the Jacobian of the state transition function;

00:01:34.620 --> 00:01:37.650
which you can think of as the derivative of

00:01:37.650 --> 00:01:41.315
the state transition function with respect to the state.

00:01:41.314 --> 00:01:43.230
And for a Kalman filter,

00:01:43.230 --> 00:01:44.564
where everything is linear,

00:01:44.564 --> 00:01:47.474
remember we could break the state transition function

00:01:47.474 --> 00:01:51.344
down into this A times x plus B times u.

00:01:51.344 --> 00:01:55.620
So the derivative of this function with respect to x is actually

00:01:55.620 --> 00:01:59.775
just this A matrix in the case of a Kalman filter.

00:01:59.775 --> 00:02:02.865
So g prime will just look like this.

00:02:02.864 --> 00:02:10.349
So even though in the pseudo code here says the g prime is a function of u and x,

00:02:10.349 --> 00:02:12.794
it turns out that for the linear case,

00:02:12.794 --> 00:02:19.294
g prime actually ignores these inputs and just returns that same A matrix every time.

00:02:19.294 --> 00:02:22.049
That won't be the case when things become

00:02:22.050 --> 00:02:26.160
non-linear and we switch to the extended Kalman Filter.

