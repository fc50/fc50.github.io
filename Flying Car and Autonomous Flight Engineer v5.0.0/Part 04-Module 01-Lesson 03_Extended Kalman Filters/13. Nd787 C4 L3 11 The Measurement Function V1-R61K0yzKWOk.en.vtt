WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.589
We can't just predict forever to get

00:00:02.589 --> 00:00:06.774
the state estimate because the transition noise is always increasing.

00:00:06.775 --> 00:00:08.275
And after each step,

00:00:08.275 --> 00:00:11.780
it's going to get bigger and bigger and bigger.

00:00:11.779 --> 00:00:16.239
If we had a perfect transition model with no noise,

00:00:16.239 --> 00:00:19.509
then this wouldn't happen and we can just predict forever,

00:00:19.510 --> 00:00:21.804
and we wouldn't need to make any measurements.

00:00:21.804 --> 00:00:23.934
But in fact, there is noise,

00:00:23.934 --> 00:00:26.334
so we do need to use measurements.

00:00:26.335 --> 00:00:30.130
Just like we defined our state-transition function, g,

00:00:30.129 --> 00:00:31.614
for the predict step,

00:00:31.614 --> 00:00:34.545
we're going to need it to define a measurement model,

00:00:34.545 --> 00:00:36.715
h, for the update step.

00:00:36.715 --> 00:00:42.350
And this 1D drone has one sensor which is a range sensor pointing downwards,

00:00:42.350 --> 00:00:45.655
which measures the height of the drone above the ground.

00:00:45.655 --> 00:00:50.179
So what the measurement model does is it takes a state as

00:00:50.179 --> 00:00:55.750
input and returns the measurement we'd expect to see from a perfect sensor.

00:00:55.750 --> 00:00:59.674
So if we pass in a state which is z. and z,

00:00:59.674 --> 00:01:02.929
then we want the measurement to just pick out the z value,

00:01:02.929 --> 00:01:06.094
since that's what our ideal height sensor would do.

00:01:06.094 --> 00:01:09.694
And the matrix that does this just looks like this.

00:01:09.694 --> 00:01:12.949
And once again, everything is linear so I can write

00:01:12.950 --> 00:01:16.880
the h function as this matrix C times x.

00:01:16.879 --> 00:01:20.694
So now, we have our measurement model, h. Now,

00:01:20.694 --> 00:01:24.625
if we go back to the pseudocode for the Bayes' Filter,

00:01:24.625 --> 00:01:29.239
the measurement is incorporated in this update function where I

00:01:29.239 --> 00:01:34.584
get my belief after prediction bel bar and I get my measurement z_sub_t.

00:01:34.584 --> 00:01:40.594
And then, I use Bayes rule to incorporate the measurement with my predicted state.

00:01:40.594 --> 00:01:42.769
For a Kalman filter,

00:01:42.769 --> 00:01:45.839
which is just an implementation of a Bayes filter,

00:01:45.840 --> 00:01:48.719
the measurement update looks a little different.

